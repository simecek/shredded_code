<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shredded Code</title>
    <link>/index.xml</link>
    <description>Recent content on Shredded Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 May 2016 21:48:51 -0700</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Thu, 05 May 2016 21:48:51 -0700</pubDate>
      
      <guid>/about/</guid>
      <description>&lt;p&gt;This is a collection of posts that are too long for &lt;a href=&#34;http://www.twitter.com/simecek42&#34;&gt;Twitter&lt;/a&gt; but too short and trivial for &lt;a href=&#34;http://applyr.blogspot.com&#34;&gt;my blog&lt;/a&gt;. Mostly, it consists of shredded pieces of code I wish to remember.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;https://www.linkedin.com/in/simecekpetr&#34;&gt;LinkedIn&lt;/a&gt; for my CV, &lt;a href=&#34;https://scholar.google.com/citations?user=248ewekAAAAJ&amp;amp;hl=en&#34;&gt;Google Scholar&lt;/a&gt; for my publications and &lt;a href=&#34;https://www.kaggle.com/simecek&#34;&gt;Kaggle&lt;/a&gt; for my latest obsession.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Census data animated</title>
      <link>/2016/03/01/census-data-animated/</link>
      <pubDate>Tue, 01 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/03/01/census-data-animated/</guid>
      <description>&lt;p&gt;I just adapted the code from &lt;a href=&#34;http://blog.revolutionanalytics.com/2016/02/japans-ageing-population-animated-with-r.html&#34;&gt;here&lt;/a&gt; to harvest Czech Republic population estimates.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./images/czechrep_pyramid.gif&#34; alt=&#34;czech&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(idbr) # devtools::install_github(&#39;walkerke/idbr&#39;)
library(ggplot2)
library(animation)
library(dplyr)
library(ggthemes)

idb_api_key(&amp;quot;YOUR API CODE HERE&amp;quot;)

male &amp;lt;- idb1(&#39;EZ&#39;, 2000:2050, sex = &#39;male&#39;) %&amp;gt;%
  mutate(POP = POP * -1,
         SEX = &#39;Male&#39;)

female &amp;lt;- idb1(&#39;EZ&#39;, 2000:2050, sex = &#39;female&#39;) %&amp;gt;%
  mutate(SEX = &#39;Female&#39;)

czechrep &amp;lt;- rbind(male, female) %&amp;gt;%
  mutate(abs_pop = abs(POP))

# Animate it with a for loop

saveGIF({
  
  for (i in 2000:2050) {
    
    title &amp;lt;- as.character(i)
    
    year_data &amp;lt;- filter(czechrep, time == i)
    
    g1 &amp;lt;- ggplot(year_data, aes(x = AGE, y = POP, fill = SEX, width = 1)) +
      coord_fixed() + 
      coord_flip() +
      geom_bar(data = subset(year_data, SEX == &amp;quot;Female&amp;quot;), stat = &amp;quot;identity&amp;quot;) +
      geom_bar(data = subset(year_data, SEX == &amp;quot;Male&amp;quot;), stat = &amp;quot;identity&amp;quot;) +
      scale_y_continuous(breaks = seq(-101000, 101000, 101000/2),
                         labels = paste0(as.character(c(seq(0.1, 0, -0.05), c(0.05, 0.1))), &amp;quot;m&amp;quot;), 
                         limits = c(min(czechrep$POP), max(czechrep$POP))) +
      theme_economist(base_size = 14) + 
      scale_fill_manual(values = c(&#39;#ff9896&#39;, &#39;#d62728&#39;)) + 
      ggtitle(paste0(&#39;Population structure of Czech Republic, &#39;, title)) + 
      ylab(&#39;Population&#39;) + 
      xlab(&#39;Age&#39;) + 
      theme(legend.position = &amp;quot;bottom&amp;quot;, legend.title = element_blank()) + 
      guides(fill = guide_legend(reverse = TRUE))
    
    print(g1)
    
  }
  
}, movie.name = &#39;czechrep_pyramid.gif&#39;, interval = 0.1, ani.width = 700, ani.height = 600)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Animated ggplots with gganimate</title>
      <link>/2016/02/19/animated-ggplots-with-gganimate/</link>
      <pubDate>Fri, 19 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/02/19/animated-ggplots-with-gganimate/</guid>
      <description>&lt;p&gt;There is now an easy way to create an animated GIF with &lt;a href=&#34;https://github.com/dgrtwo/gganimate&#34;&gt;gganimate&lt;/a&gt; package:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./images/gganimate_gapminder.gif&#34; alt=&#34;gapminder demo&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(gapminder)
library(ggplot2)
library(gganimate)
theme_set(theme_bw())

p &amp;lt;- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, color = continent, frame = year)) +
  geom_point() +
  scale_x_log10()

gg_animate(p)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See that all you need to do is to set &lt;code&gt;frame&lt;/code&gt; variable. A more sophisticated example from &lt;a href=&#34;http://varianceexplained.org/r/why-I-use-ggplot2/&#34;&gt;David Robinson&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./images/gganimate_kernels.gif&#34; alt=&#34;kernels demo&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(dplyr)
library(ggplot2)
library(broom)
library(gganimate)
theme_set(theme_bw())

set.seed(2016)
min_weight &amp;lt;- .0005

# original data and bandwidths
bws &amp;lt;- c(.25, .5, .75, 1)
x_data &amp;lt;- c(rnorm(30, 0), rnorm(15, 6))

# add some y noise to be visible
dat &amp;lt;- data_frame(x = x_data) %&amp;gt;%
  mutate(y = rnorm(n(), .5, .025))

# density fits for each banwidth
fits &amp;lt;- dat %&amp;gt;%
  inflate(bw = bws) %&amp;gt;%
  do(tidy(density(.$x, bw = .$bw[1], from = -4, to = 9, n = 100)))
centers &amp;lt;- sort(unique(fits$x))

# calculate weights at each x0 center
prep &amp;lt;- dat %&amp;gt;%
  inflate(center = centers, bw = bws) %&amp;gt;%
  mutate(weight = dnorm(x, center, bw)) %&amp;gt;%
  filter(weight &amp;gt; min_weight)

# also raster data for the background
ras &amp;lt;- expand.grid(x = seq(min(centers), max(centers), .05),
                   y = c(0, 1)) %&amp;gt;%
  inflate(center = centers, bw = bws) %&amp;gt;%
  mutate(weight = dnorm(x, center, bw)) %&amp;gt;%
  filter(weight &amp;gt; min_weight)

# create the plot with layers for the background, the points, the red fills, the
# red vertical line, and the cumulative line plot
p &amp;lt;- ggplot(prep, aes(x, y)) +
  geom_raster(aes(alpha = weight, frame = center), data = ras, fill = &amp;quot;gray&amp;quot;, hjust = 0, vjust = 0) +
  geom_point(shape = 1, size = 3, data = dat, alpha = .25) +
  geom_point(aes(alpha = weight, frame = center), color = &amp;quot;red&amp;quot;, size = 3) +
  geom_vline(aes(xintercept = x, frame = x), data = fits, lty = 2, color = &amp;quot;red&amp;quot;) +
  geom_line(aes(frame = x, cumulative = TRUE), color = &amp;quot;red&amp;quot;, data = fits) +
  coord_cartesian(ylim = c(0, max(prep$y))) +
  facet_wrap(~bw) +
  ylab(&amp;quot;&amp;quot;)

g &amp;lt;- gg_animate(p, interval = .1, title_frame = FALSE)

g
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Docker One-liners</title>
      <link>/2016/02/18/docker-one-liners/</link>
      <pubDate>Thu, 18 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/02/18/docker-one-liners/</guid>
      <description>

&lt;p&gt;Let other people care about the installation procedures. The best thing about docker is that you get your app installed and running with just one line of code. I am listing here my favorite docker images and one-liners to run them.&lt;/p&gt;

&lt;p&gt;My favorite way to run docker containers is a virtual machine on &lt;a href=&#34;https://m.do.co/c/673c97887267&#34;&gt;Digital Ocean&lt;/a&gt; with Ubuntu and docker preinstalled (see &amp;lsquo;How to start Digital Ocean droplet?&amp;rsquo; &lt;a href=&#34;https://github.com/churchill-lab/sysgen2015&#34;&gt;here&lt;/a&gt; ).&lt;/p&gt;

&lt;h3 id=&#34;rstudio-server&#34;&gt;RStudio Server&lt;/h3&gt;

&lt;p&gt;I use &lt;a href=&#34;https://hub.docker.com/r/rocker/hadleyverse/&#34;&gt;rocker/hadleyverse&lt;/a&gt; docker image&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -p 8787:8787 -e USER=rstudio -e PASSWORD=your_secret_password rocker/hadleyverse
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I also have &lt;a href=&#34;https://github.com/simecek/GoogleCloud/blob/master/docker/rstudio/Dockerfile&#34;&gt;my own versions&lt;/a&gt; with additional R packages preinstalled:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -p 8787:8787 -e USER=rstudio -e PASSWORD=your_secret_password simecek/rstudio
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even if you forgot to install some software, you can always &lt;a href=&#34;http://simecek.github.io/Log-Into-A-Running-Docker-Container/&#34;&gt;log into running docker container&lt;/a&gt; and do so.&lt;/p&gt;

&lt;h3 id=&#34;shiny-server&#34;&gt;Shiny Server&lt;/h3&gt;

&lt;p&gt;If you do not want to pay for &lt;a href=&#34;https://www.shinyapps.io/&#34;&gt;shinyapps.io&lt;/a&gt;, you need to run your own Shiny Server. Note I use &lt;code&gt;-v&lt;/code&gt; option to attach &lt;code&gt;\shiny&lt;/code&gt; folder with my shiny applications.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run -d -p 3838:3838 -v /shiny/:/srv/shiny-server/ -v /srv/shinylog:/var/log rocker/shiny&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;jupyter-notebook&#34;&gt;Jupyter Notebook&lt;/h3&gt;

&lt;p&gt;An easy way to get Jupyter Notebook with Python 2, Python 3 and R.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -p 8888:8890 jupyter/datascience-notebook start-notebook.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, Kaggle offers more fancy &lt;a href=&#34;http://jamiehall.cc/post/how-to-get-started-with-data-science-in-containers&#34;&gt;IPython notebook&lt;/a&gt; with numerous machine learning packages preinstalled&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -v $PWD:/tmp/working -w=/tmp/working -p 8888:8888 --rm -it kaggle/python jupyter notebook --no-browser --ip=&amp;quot;0.0.0.0&amp;quot; --notebook-dir=/tmp/working
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And who would not like to try Google&amp;rsquo;s deep learning TensorFlow module:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -p 8888:8888 b.gcr.io/tensorflow/tensorflow sh -c &amp;quot;jupyter notebook /notebook&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;wordpress&#34;&gt;Wordpress&lt;/h3&gt;

&lt;p&gt;Finally, just a few days ago I tried to run my own wordpress for the first time. It actually runs two containers: &lt;code&gt;wordpress&lt;/code&gt; itself and the linked &lt;code&gt;mysql&lt;/code&gt; container.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --name wordpressdb -e MYSQL_ROOT_PASSWORD=your_secret_password -e MYSQL_DATABASE=wordpress -d mysql
docker run -e WORDPRESS_DB_PASSWORD=your_secret_password -d --name wordpress --link wordpressdb:mysql -p 8080:80 -v &amp;quot;$PWD/wordpress/&amp;quot;:/var/www/html  wordpress
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Stop And Remove All Containers</title>
      <link>/2016/01/30/stop-and-remove-all-containers/</link>
      <pubDate>Sat, 30 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/01/30/stop-and-remove-all-containers/</guid>
      <description>&lt;p&gt;If you want to stop all your running docker containers, use&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker stop $(docker ps -a -q)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Stopped containers can be restarted with &lt;code&gt;docker start&lt;/code&gt; command or they can be removed permanently with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker rm $(docker ps -a -q)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Log Into A Running Docker Container</title>
      <link>/2016/01/26/log-into-a-running-docker-container/</link>
      <pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/01/26/log-into-a-running-docker-container/</guid>
      <description>&lt;p&gt;Imagine your container is running but you would like to &amp;ldquo;ssh inside&amp;rdquo;. For example your container is R/Shiny server and you need to install a new R package. Or your container is Jupyter Notebook and your forgot the password to access it (it is stored in the environment variable $PASSWORD).&lt;/p&gt;

&lt;p&gt;You need a way to log into the container. And the following command is doing exactly that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker exec -i -t $CONTAINERID /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;$CONTAINERID&lt;/code&gt; is a hexadecimal number you get from &lt;code&gt;docker ps&lt;/code&gt; listing, e.g. &lt;code&gt;1987416184d8&lt;/code&gt; or &lt;code&gt;67a0a9d82112&lt;/code&gt; in the example below&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                              NAMES
1987416184d8        churchill/doqtl     &amp;quot;/usr/bin/supervisord&amp;quot;   12 days ago         Up 12 days          1410/tcp, 0.0.0.0:8888-&amp;gt;8787/tcp   sleep
67a0a9d82112        rocker/shiny        &amp;quot;/usr/bin/shiny-serve&amp;quot;   5 weeks ago         Up 5 weeks          0.0.0.0:80-&amp;gt;3838/tcp               webapp
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>